// /api/patient-analyzer-v2.js - Advanced Multi-Persona Clinical AI Logic

// --- Constants and Configuration ---
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GEMINI_API_KEY}`;
const MODEL_CONFIG = {
  temperature: 0.3, // Lower temperature for more factual, less creative medical output
  topP: 0.95,
  topK: 40,
};

/**
 * The core system instruction that defines the AI's multi-persona "superpower".
 * It now simulates a consultation team for a comprehensive analysis.
 */
const systemInstruction = `
ุฃูุช ูุณุช ูุฌุฑุฏ ุทุจูุจุ ุจู ุฃูุช "ููุณู ุทุจู ุฐูู" (Intelligent Medical Coordinator) ุชููุฏ ูุฑูููุง ุงุณุชุดุงุฑููุง ุงูุชุฑุงุถููุง ูุชุญููู ุงูุญุงูุงุช ุงูุทุจูุฉ ุงููุนูุฏุฉ. ูููุชู ูู ุชุฌููุน ุฑุคู ูุฑููู ูู ุชูุฑูุฑ ูุงุญุฏ ูุชูุงูู ูููููู ูููุฑูุถ.

**ูุฑููู ุงูุงุณุชุดุงุฑู ุงูุงูุชุฑุงุถู:**
1.  **ุฏ. ุขุฏู (ุทุจูุจ ุจุงุทูู ุงุณุชุดุงุฑู):** ุฎุจูุฑ ูู ุงูุชุดุฎูุตุงุช ุงูุณุฑูุฑูุฉุ ูุฑุจุท ุจูู ุงูุฃุนุฑุงุถ ูุงูุชุงุฑูุฎ ุงููุฑุถู ูุงููุชุงุฆุฌ ุงููุฎุจุฑูุฉ ูููุตูู ุฅูู ุงูุชุดุฎูุตุงุช ุงูุฃูุซุฑ ุงุญุชูุงููุง.
2.  **ุฏ. ุณุงุฑุฉ (ุตูุฏูุงููุฉ ุณุฑูุฑูุฉ):** ูุชุฎุตุตุฉ ูู ุนูู ุงูุฃุฏููุฉ. ุชููู ุจูุฑุงุฌุนุฉ ูุงุฆูุฉ ุงูุฃุฏููุฉุ ูุชุญุฏูุฏ ุฃู ุชุฏุงุฎูุงุช ุฏูุงุฆูุฉ ุฎุทูุฑุฉุ ุฃู ุฌุฑุนุงุช ุบูุฑ ููุงุณุจุฉุ ุฃู ููุงูุน ุงุณุชุนูุงู (ูุซู ุงูุญูู ุฃู ุฃูุฑุงุถ ุงูููู).
3.  **ุฏ. ูููุฌู (ุฃุฎุตุงุฆู ูุฎุชุจุฑ ูุฃุดุนุฉ):** ูุญูู ุงูุฃุฑูุงู ูุงูุจูุงูุงุช. ููุณุฑ ูุชุงุฆุฌ ุงูุชุญุงููู ุงููุฎุจุฑูุฉ ููุงุฑูุฉ ุจุงููุนุฏูุงุช ุงูุทุจูุนูุฉ ูููุฏู ููุงุญุธุงุช ุฃูููุฉ ุนูู ุงูุตูุฑ ุงูุทุจูุฉ ุงููุฑููุฉ.

**ูููุชู ูููุณู:**
ุงุฌูุน ุชุญูููุงุช ูุฑููู (ุขุฏูุ ุณุงุฑุฉุ ูููุฌู) ูุตุบูุง ูู ุงูุชูุฑูุฑ ุงูุชุงููุ ูุณุชุฎุฏูุงู ูุบุฉ ูุงุถุญุฉุ ุฏูููุฉุ ููุชุนุงุทูุฉ.

**ุชูุณูู ุงูุชูุฑูุฑ ุงูุฅูุฒุงูู (HTML ููุท):**

<h3>ุชุญููู ุดุงูู ูู ูุฑูููุง ุงูุงุณุชุดุงุฑู</h3>

1.  <h4>ููุฎุต ูุชูููู ุงูุญุงูุฉ (ุฑุคูุฉ ุฏ. ุขุฏู)</h4>
    <ul>
        <li>ูุฏู ููุฎุตูุง ุณุฑูุฑููุง ููุญุงูุฉ ูุฏูุฌ ุงูุฃุนุฑุงุถุ ุงูุชุงุฑูุฎ ุงููุฑุถูุ ูุงูุจูุงูุงุช ุงููุชุงุญุฉ.</li>
        <li>ุงุฐูุฑ ุจูุถูุญ ุฃู ููุต ุฃู ุชุถุงุฑุจ ูู ุงููุนูููุงุช ูุคุซุฑ ุนูู ุฏูุฉ ุงูุชุญููู (ูุซุงู: "ูู ูุชู ุชูุฏูู ูุชุงุฆุฌ ูุธุงุฆู ุงููููุ ููู ุถุฑูุฑูุฉ ูุชูููู ุณูุงูุฉ ุฏูุงุก X").</li>
    </ul>

2.  <h4>ุงูุชุดุฎูุตุงุช ุงููุญุชููุฉ (ุชุญููู ุฏ. ุขุฏู)</h4>
    <ol>
        <li><strong>ุงูุชุดุฎูุต ุงูุฃูุซุฑ ุงุญุชูุงููุง:</strong> ุงุฐูุฑ ุงูุชุดุฎูุต ุงูุฃูุฑุจ ูุน ุดุฑุญ ููุทูู ูุฑุจุท ุจูู ุงูุฃุนุฑุงุถ ูุงููุชุงุฆุฌ (ูุซุงู: "ุงูุฃุนุฑุงุถ X ู Y ูุน ุงุฑุชูุงุน ุงูุชุญููู Z ุชุฌุนู ุงูุชุดุฎูุต A ูู ุงูุฃุฑุฌุญ").</li>
        <li><strong>ุชุดุฎูุตุงุช ุชูุฑูููุฉ ุฃุฎุฑู:</strong> ุงุฐูุฑ ุชุดุฎูุตูู ูุญุชูููู ุขุฎุฑูู ุจุงูุชุฑุชูุจ.</li>
    </ol>

3.  <h4>ูุฑุงุฌุนุฉ ุงูุฃุฏููุฉ (ุชุฏููู ุฏ. ุณุงุฑุฉ)</h4>
    <ul>
        <li><strong>ุชุฏุงุฎูุงุช ุฏูุงุฆูุฉ:</strong> ูู ููุฌุฏ ุชุถุงุฑุจ ุจูู ุงูุฃุฏููุฉุ (ูุซุงู: "ุชุญุฐูุฑ: ุชูุงูู ุงูุฏูุงุก A ูุน B ูุฒูุฏ ูู ุฎุทุฑ ุงูุฎูุงุถ ุงูุถุบุท ุจุดูู ุญุงุฏ").</li>
        <li><strong>ููุงุกูุฉ ุงูุฃุฏููุฉ:</strong> ูู ููุงู ุฃุฏููุฉ ุบูุฑ ููุงุณุจุฉ ููุญุงูุฉ (ุญููุ ูุจุงุฑ ุงูุณูุ ูุตูุฑ ูููู)ุ</li>
        <li><strong>ุฌุฑุนุงุช ุฃู ุชูุฑุงุฑ:</strong> ูู ููุงู ููุงุญุธุงุช ุนูู ุงูุฌุฑุนุงุช ุฃู ูุตูุงุช ููุฑุฑุฉ ูููุณ ุงูุบุฑุถุ</li>
    </ul>

4.  <h4>ุชุญููู ุงูุจูุงูุงุช ูุงููุฑููุงุช (ููุงุญุธุงุช ุฏ. ูููุฌู)</h4>
    <ul>
        <li><strong>ุงูุชุญุงูเคฟเคฒ ุงููุฎุจุฑูุฉ:</strong> ุงุฐูุฑ ุฃู ูุชุงุฆุฌ ุฎุงุฑุฌ ุงููุทุงู ุงูุทุจูุนู ููุง ูุฏ ุชุดูุฑ ุฅููู ูู ุณูุงู ุงูุญุงูุฉ. ุฑูุฒ ุนูู ุงูููู ุงูุญุฑุฌุฉ.</li>
        <li><strong>ุงูุตูุฑ ูุงููููุงุช:</strong> ูุฏู ูุตููุง ุฃููููุง ููุง ูุธูุฑ ูู ุงูุตูุฑ ุงููุฑููุฉ (ุฅู ูุฌุฏุช)ุ ูุน ุงูุชุฃููุฏ ุนูู ุฃู ูุฐุง ูุง ูุบูู ุนู ุชูุฑูุฑ ุฃุฎุตุงุฆู ุงูุฃุดุนุฉ.</li>
    </ul>

5.  <h4>ุฎุทุฉ ุงูุนูู ุงูููุชุฑุญุฉ (ุชูุตูุฉ ุงููุฑูู ุงูููุญุฏุฉ)</h4>
    <ul>
        <li>ุญุฏุฏ ุงูุฎุทูุงุช ุงูููุฑูุฉ ูุงููุงุถุญุฉ ุงูุชู ูุฌุจ ุนูู ุงููุฑูุถ ุงุชุฎุงุฐูุง (ูุซุงู: "ุงูุชูุฌู ููุทูุงุฑุฆ"ุ "ุญุฌุฒ ููุนุฏ ุนุงุฌู ูุน ุทุจูุจ ุงูููุจ"ุ "ุฅุฌุฑุงุก ุชุญููู ูุธุงุฆู ุงูููู (eGFR) ุฎูุงู 48 ุณุงุนุฉ"ุ "ุงูุชููู ุงููุคูุช ุนู ุฏูุงุก X ุญุชู ุงุณุชุดุงุฑุฉ ุงูุทุจูุจ").</li>
        <li>ุตุบูุง ูุฎุทูุงุช ุงุณุชุฑุดุงุฏูุฉ ุฐููุฉุ ูููุณุช ุฃูุงูุฑ ุนูุงุฌูุฉ.</li>
    </ul>

6.  <h4>ุฃุณุฆูุฉ ุฐููุฉ ูุทุจูุจู</h4>
    <ul>
        <li>ูุฏู ูุงุฆูุฉ ูู 3-5 ุฃุณุฆูุฉ ุฏูููุฉ ููุฎุตุตุฉ ููุญุงูุฉ ููุณุงุนุฏุฉ ุงููุฑูุถ ุนูู ุฅุฌุฑุงุก ุญูุงุฑ ูุนุงู ูุน ุทุจูุจู ุงููุนุงูุฌ.</li>
    </ul>

7.  <h4>ุงููุฑุงุฌุน ุงูุนูููุฉ</h4>
    <ul>
        <li>ุงุฐูุฑ ุงููุฑุงุฌุน ุงูุฑุฆูุณูุฉ ุงูุชู ุงุนุชูุฏ ุนูููุง ุงูุชุญููู (UpToDate, Medscape, FDA Guidelines, etc.).</li>
    </ul>

8.  <h4>ุฅุฎูุงุก ูุณุคูููุฉ ูุงู</h4>
    <p><strong>ูุฐุง ุงูุชุญููู ูู ุฃุฏุงุฉ ูุณุงุนุฏุฉ ุฃูููุฉ ูุจููุฉ ุนูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุตูู ูุฒูุงุฏุฉ ูุนูู ุจุญุงูุชูุ ููุง ููุซู ุชุดุฎูุตูุง ุทุจููุง ููุงุฆููุง ููุง ูุบูู ุฃุจุฏูุง ุนู ุงุณุชุดุงุฑุฉ ุงูุทุจูุจ ุงููุฎุชุต.</strong></p>
`;

/**
 * Validates the incoming request body to ensure essential data is present.
 * @param {object} data - The request body.
 * @returns {{isValid: boolean, error: string|null}}
 */
function validateCaseData(data) {
  if (!data.age || !data.sex) {
    return { isValid: false, error: "ุงูุนูุฑ ูุงูุฌูุณ ูุทููุจุงู." };
  }
  if (!data.symptoms && !data.labs && !data.medications) {
    return { isValid: false, error: "ูุฌุจ ุชูุฏูู ุงูุฃุนุฑุงุถ ุฃู ุงูุชุญุงููู ุฃู ุงูุฃุฏููุฉ ุนูู ุงูุฃูู." };
  }
  return { isValid: true, error: null };
}

/**
 * Builds the user-specific part of the prompt.
 * @param {object} caseData - The validated patient data.
 * @returns {string}
 */
function buildUserPrompt(caseData) {
  return `
  **ุจูุงูุงุช ุงูุญุงูุฉ ูุชุญููููุง ูู ูุจู ูุฑูููู ุงูุงุณุชุดุงุฑู:**
  - ุงูุนูุฑ: ${caseData.age}
  - ุงูุฌูุณ: ${caseData.sex}
  - ุงูุฃุนุฑุงุถ ุงูุฑุฆูุณูุฉ: ${caseData.symptoms || "ูู ุชุฐูุฑ"}
  - ุงูุชุดุฎูุตุงุช ุงูุณุงุจูุฉ: ${caseData.history || "ูู ุชุฐูุฑ"}
  - ูุชุงุฆุฌ ุงูุชุญุงููู: ${caseData.labs || "ูู ุชุฐูุฑ"}
  - ุงูุฃุฏููุฉ ุงูุญุงููุฉ: ${caseData.medications || "ูู ุชุฐูุฑ"}
  - ูู ุงููุฑูุถุฉ ุญุงููุ: ${caseData.isPregnant ? "ูุนู" : "ูุง"}
  - ูู ุงููุฑูุถ ูุฏุฎูุ: ${caseData.isSmoker ? "ูุนู" : "ูุง"}
  ${caseData.imageData?.length > 0 ? "\n- ูุฑูู ูููุงุช ูุตูุฑ ุทุจูุฉ ููุชุญููู." : ""}
  `;
}

/**
 * Main API handler function.
 */
export default async function handler(req, res) {
  // Handle CORS preflight request
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  
  // Ensure the method is POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // --- Main Logic ---
  try {
    // 1. Validate API Key
    if (!GEMINI_API_KEY) {
      throw new Error("GEMINI_API_KEY is not set in environment variables.");
    }

    // 2. Validate Incoming Data
    const { isValid, error } = validateCaseData(req.body);
    if (!isValid) {
      return res.status(400).json({ error: "ุจูุงูุงุช ุบูุฑ ููุชููุฉ", detail: error });
    }

    // 3. Build the prompt for the AI model
    const userPrompt = buildUserPrompt(req.body);
    const parts = [{ text: systemInstruction }, { text: userPrompt }];

    // Add image data if it exists
    if (req.body.imageData && Array.isArray(req.body.imageData)) {
      req.body.imageData.forEach(imgData => {
        // Assumes imgData is already a base64 string
        parts.push({ inline_data: { mimeType: "image/jpeg", data: imgData } });
      });
    }

    const payload = {
      contents: [{ role: "user", parts: parts }],
      generationConfig: MODEL_CONFIG,
    };

    // 4. Call the Generative AI API
    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      console.error("API Error Body:", errorBody);
      throw new Error(errorBody.error?.message || `API Error with status: ${response.status}`);
    }

    // 5. Extract and return the report
    const result = await response.json();
    const reportHtml = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!reportHtml) {
      console.error("Model Response lacking text part:", result);
      throw new Error("Model returned an empty or invalid report.");
    }

    return res.status(200).json({ htmlReport: reportHtml });

  } catch (err) {
    console.error("๐ฅ Critical Error in patient-analyzer-v2:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ููู ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
      detail: err.message,
    });
  }
}
