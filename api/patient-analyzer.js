// /api/patient-analyzer.js - Human-friendly Clinical AI Logic for Patients

const systemInstruction = `
ุฃูุช ุทุจูุจ ุงุณุชุดุงุฑู ูุชุฎุตุต ูู ุงูุทุจ ุงูุจุงุทูู ูุงูุฑุนุงูุฉ ุงูุดุงููุฉ. ูููุชู ูู ูุณุงุนุฏุฉ ุงููุฑูุถ ุนูู ููู ุญุงูุชู ุจูุงุกู ุนูู ูุง ุฃุฏุฎูู ูู ุฃุนุฑุงุถุ ุฃุฏููุฉุ ูุชุญุงููู.

**ุงููููู ุงูุฅูุฒุงูู ููุชูุฑูุฑ (HTML ููุท):**

<h3>ุชุญููู ุญุงูุชู ุงูุตุญูุฉ</h3>

1. <h4>ูุตู ุงูุญุงูุฉ</h4>
<ul>
<li>ูุฏู ููุฎุตูุง ููุญุงูุฉ ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูููุฏุฎูุฉ.</li>
<li>ุงุฐูุฑ ูุง ุฅุฐุง ูุงูุช ููุงู ุจูุงูุงุช ูุงูุตุฉ ุชุคุซุฑ ุนูู ุฏูุฉ ุงูุชุญููู.</li>
</ul>

2. <h4>ุฃูุฑุจ ุงูุชุดุฎูุตุงุช ุงููุญุชููุฉ</h4>
<ol>
<li>ุถุน ุงูุชุดุฎูุต ุงูุฃูุฑุจ ุจูุงุกู ุนูู ุงููุนุทูุงุช.</li>
<li>ุซู ุงูุงุญุชูุงูุงุช ุงูุฃูู ุฏูุฉ ุจุงูุชุฑุชูุจ.</li>
</ol>

3. <h4>ููุงุญุธุงุช ุญุฑุฌุฉ / ุฃุฎุทุงุก ุทุจูุฉ ูุญุชููุฉ</h4>
<ul>
<li>ุชุถุงุฑุจ ุจูู ุงูุฃุฏููุฉ</li>
<li>ุฃุฏููุฉ ุนุงููุฉ ุงูุฎุทูุฑุฉ ุญุณุจ ุงูุนูุฑ ุฃู ุงูุชุญุงููู</li>
<li>ุฌุฑุนุงุช ุบูุฑ ููุงุณุจุฉ</li>
</ul>

4. <h4>ุฎุทุฉ ุงูุนูู (Action Plan)</h4>
<ul>
<li>ูุซูุงู: ุฃููู ุฏูุงุก ูุนูู ูุคูุชูุงุ ุงุนูู ุชุญูููุ ุฑุงุฌุน ุทุจูุจ ูุฎุชุต...</li>
</ul>

5. <h4>ุฃุณุฆูุฉ ุชูุชุฑุญ ุฃู ุชุทุฑุญูุง ุนูู ุทุจูุจู</h4>
<ul>
<li>ูู ุฃุญุชุงุฌ ุฅูู ุชุญููู ูุธุงุฆู ุงููููุ</li>
<li>ูู ูุฐู ุงูุฃุฏููุฉ ููุงุณุจุฉ ููุฑุถู ุงููุฒููุ</li>
</ul>

**ููุงุญุธุงุช ุชูููุฉ ุฅูุฒุงููุฉ:**
- ุงูุชุจ ุจูุบุฉ ุฅูุณุงููุฉ ูุงุถุญุฉ.
- ูุง ุชูุตุฏุฑ ุชุดุฎูุตูุง ููุงุฆููุงุ ุจู ุชุฑุฌูุญู.
- ูุง ุชูุฏู ุนูุงุฌูุง ูุจุงุดุฑูุง ุฏูู ุงูุชุฑุงุญ ูุฑุงุฌุนุฉ ุทุจูุจ ูุชุฎุตุต.
- ุฅุฐุง ูุงูุช ุงูุจูุงูุงุช ูุงูุตุฉุ ูุจูู ุงููุณุชุฎุฏู ุจุฐูู.

**ุงููุตุงุฏุฑ:** UpToDate, Mayo Clinic, Medscape, WHO, FDA
`;

function buildUserPrompt(caseData) {
  return `
  **ุจูุงูุงุช ุงูุญุงูุฉ ุงูุชู ุฃุฏุฎููุง ุงููุณุชุฎุฏู:**
  - ุงูุนูุฑ: ${caseData.age}
  - ุงูุฌูุณ: ${caseData.sex}
  - ุงูุฃุนุฑุงุถ: ${caseData.symptoms}
  - ุงูุชุดุฎูุต ุงูุณุงุจู: ${caseData.history}
  - ุงูุชุญุงููู: ${caseData.labs}
  - ุงูุฃุฏููุฉ ุงูุญุงููุฉ: ${caseData.medications}
  - ุญุงูู: ${caseData.isPregnant ? "ูุนู" : "ูุง"}
  - ูุฏุฎู: ${caseData.isSmoker ? "ูุนู" : "ูุง"}
  ${caseData.imageData?.length > 0 ? "\n- ูุฑูู ุตูุฑ ุทุจูุฉ ููุชุญููู." : ""}
  `;
}

export default async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  if (req.method === "OPTIONS") return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method Not Allowed' });

  try {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) throw new Error("GEMINI_API_KEY is not set.");
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;

    const userPrompt = buildUserPrompt(req.body);
    const parts = [{ text: systemInstruction }, { text: userPrompt }];

    if (req.body.imageData && Array.isArray(req.body.imageData)) {
      req.body.imageData.forEach(imgData => {
        parts.push({ inline_data: { mimeType: "image/jpeg", data: imgData } });
      });
    }

    const payload = {
      contents: [{ role: "user", parts: parts }],
      generationConfig: { temperature: 0.4, topP: 0.95, topK: 40 },
    };

    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      throw new Error(errorBody.error?.message || `API Error: ${response.status}`);
    }

    const result = await response.json();
    const reportHtml = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!reportHtml) {
      throw new Error("Model returned an empty report.");
    }

    return res.status(200).json({ htmlReport: reportHtml });

  } catch (err) {
    console.error("๐ฅ Error in patient-analyzer:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
      detail: err.message,
    });
  }
}
