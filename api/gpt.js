
// /api/gpt.js

/**
 * @description Serverless API endpoint to generate a detailed, formatted HTML report.
 * This version is now fully multimodal, capable of analyzing both text and image inputs.
 *
 * ุชู ุชุญุฏูุซ ูุฐุง ุงูููุฏ ููุตุจุญ ูุชุนุฏุฏ ุงููุณุงุฆุทุ ูุงุฏุฑุงู ุนูู ุชุญููู ุงููุฏุฎูุงุช ุงููุตูุฉ ูุงูุตูุฑ ูุนุงู.
 */
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  // Handle preflight OPTIONS request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  // Ensure the request method is POST
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const {
    diagnosis,
    symptoms,
    age,
    gender,
    smoker,
    beforeProcedure,
    afterProcedure,
    imageData // Now receiving image data
  } = req.body;

  // Validate that either text fields or an image is provided
  if ((!diagnosis && !symptoms) && !imageData) {
    return res.status(400).json({ error: "ุงูุฑุฌุงุก ููุก ุงูุญููู ุงููุตูุฉ ุฃู ุฑูุน ุตูุฑุฉ." });
  }

  const apiKey = process.env.GEMINI_API_KEY;
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;

  // **PROMPT ENHANCEMENT**: The prompt now instructs the model to prioritize image analysis.
  // **ุชุญุณูู ุงูุชุนูููุงุช**: ุงูุชุนูููุงุช ุงูุขู ุชูุฌู ุงููููุฐุฌ ูุฅุนุทุงุก ุงูุฃููููุฉ ูุชุญููู ุงูุตูุฑุฉ.
  const htmlPrompt = `
    ุฃูุช "ุตูุฏูู ุฅููููููู ูุฎุจูุฑ ูุฑุงุฌุนุฉ ุทุจูุฉ ูุชุฃููู". ูููุชู ุชุญููู ุงูุจูุงูุงุช ุงูุทุจูุฉ ุงูููุฏูุฉ (ุณูุงุก ูุงูุช ูุตุงู ุฃู ุตูุฑุฉ ูุตูุฉ ุทุจูุฉ) ูุชูุฏูู ุชูุฑูุฑ HTML ููุตู.

    **ุงูุจูุงูุงุช ูุชุญููููุง:**
    - **ุงูุตูุฑุฉ ุงููุฑููุฉ (ุฅู ูุฌุฏุช):** ูู ุจูุฑุงุกุฉ ูุชุญููู ุงููุตูุฉ ุงูุทุจูุฉ ุฃู ุงููุทุงูุจุฉ ุงููุฑููุฉ ุฃููุงู. ุงุณุชุฎุฑุฌ ูููุง ุงูุชุดุฎูุตุงุชุ ุงูุฃุฏููุฉุ ูุงูุฌุฑุนุงุช.
    - **ุงูุจูุงูุงุช ุงููุตูุฉ (ููุณูุงู ุงูุฅุถุงูู):**
        - ุงูุชุดุฎูุต ุงููููุชุฑ: ${diagnosis || "ูู ูุญุฏุฏ"}
        - ุงูุฃุนุฑุงุถ: ${symptoms || "ูู ุชุญุฏุฏ"}
        - ุงูุนูุฑ: ${age || "ูู ูุญุฏุฏ"}
        - ุงูุฌูุณ: ${gender || "ูู ูุญุฏุฏ"}
        - ูุฏุฎู: ${smoker ? 'ูุนู' : 'ูุง'}
        - ุงูุฅุฌุฑุงุกุงุช ุงููุชุฎุฐุฉ: ${beforeProcedure}, ${afterProcedure}

    ---
    **ูููู ุงูุชูุฑูุฑ ุงููุทููุจ (ูุฌุจ ุฅูุชุงุฌ ููุฏ HTML ููุท):**

    <h3>ุชูุฑูุฑ ุชุญูููู ูููุตู</h3>
    
    <div class="section">
        <h4>1. ุชุญููู ุงูุฅุฌุฑุงุกุงุช ููุจุฑุฑุงุชูุง ุงูุทุจูุฉ:</h4>
        <p>ุจูุงุกู ุนูู ุงูุตูุฑุฉ ูุงูุจูุงูุงุชุ ุงุจุฏุฃ ุจููุฏ ุงูุชุดุฎูุต. ุซูุ ุญูู ูู ุฏูุงุก ูุฅุฌุฑุงุก. **ุนูุฏ ุชุญููู ุงูุฃุฏููุฉุ ุฃูุช ููุฒู ุจุชุญููู ุฎุตุงุฆุตูุง ุงูุฏูุงุฆูุฉ:** ูู ุงูุฏูุงุก ุงููุฎุชุงุฑ ูู ุงูุฃูุถูุ ูู ูุตู ุจุชุฑููุฒ ูุงูู ูููุงู ุงูุนุฏููุ ุงููุฏ ุงูุงุฎุชูุงุฑุงุช ุงูุฏูุงุฆูุฉ ุงูุณูุฆุฉ ุจูุถูุญ.</p>
    </div>

    <div class="section">
        <h4>2. ุงุญุชูุงููุฉ ุงูุฑูุถ ูู ุงูุชุฃููู:</h4>
        <p>ุญุฏุฏ ูุณุชูู ุงูุฎุทุฑ. ุงุฐูุฑ ุจูุถูุญ ูุง ูู ุงูุฅุฌุฑุงุกุงุช ุงููุนุฑุถุฉ ููุฑูุถุ ูููุชูุง ุจุงูุฑูุงู ุงูุณุนูุฏูุ ูุงูุณุจุจ ุงูุนููู ุฃู ุงูุชุฃูููู ููุฑูุถ.</p>
    </div>

    <div class="section">
        <h4>3. ูุง ูุงู ูููู ุนููู ูุฑูุน ุงููุงุชูุฑุฉ (ููููุง ููุจุฑูุชููููุงุช ุงูุทุจูุฉ):</h4>
        <p>ุงูุชุฑุญ ุฎุทุฉ ุนูู ูุงููุฉ ุชุจุฏุฃ ุจุงูุงุณุชุดุงุฑุงุช ุงูุถุฑูุฑูุฉ ุซู ุงููุญูุตุงุช ุงููุชุฎุตุตุฉ. ูู ุดููููุงู ูุงูุชุฑุญ ูุญูุตุงุช ุฌูุงุฒูุฉ (ูุซู ูุธุงุฆู ุงูููู) ุฅุฐุง ูุงูุช ุงูุญุงูุฉ ุชุณุชุฏุนู ุฐูู. ุงุฏุนู ูู ุงูุชุฑุงุญ ุจุจุฑูุชูููู ุทุจู ูุนุฑูู.</p>
    </div>

    <div class="section financial-summary">
        <h4>4. ุงููุคุดุฑ ุงููุงูู:</h4>
        <table>
            <thead><tr><th>ุงููุคุดุฑ</th><th>ุงููููุฉ (ุฑูุงู ุณุนูุฏู)</th><th>ููุงุญุธุงุช</th></tr></thead>
            <tbody>
                <tr><td>ุฅุฌูุงูู ุงูุฏุฎู ุงูุญุงูู (ุงููููุชุฑ)</td><td>[ุถุน ุงููููุฉ ููุง]</td><td>[ุถุน ุงูููุงุญุธุฉ ููุง]</td></tr>
                <tr><td>ุฅุฌูุงูู ุงูุฏุฎู ุจุนุฏ ุฎุตู ุงูุฑููุถ ุงููุญุชููุฉ</td><td>[ุถุน ุงููููุฉ ููุง]</td><td>[ุถุน ุงูููุงุญุธุฉ ููุง]</td></tr>
                <tr><td>ุฅุฌูุงูู ุงูุฏุฎู ุงููุญุชูู ูุน ุงูุชุญุณููุงุช</td><td>[ุถุน ุงููููุฉ ููุง]</td><td>[ุถุน ุงูููุงุญุธุฉ ููุง]</td></tr>
            </tbody>
        </table>
    </div>

    <div class="section">
        <h4>5. ุชูุตูุงุช ุนุงูุฉ ุดุงููุฉ:</h4>
        <p>ูุฏู ูุตุงุฆุญ ุนุงูุฉ ูุชุญุณูู ุงูุชุฑููุฒ ูุงูุชูุซูู ูุงุฎุชูุงุฑ ุงูุฃุฏููุฉ.</p>
    </div>

    **ูุงุนุฏุฉ ูููุฉ:** ูุง ุชุถุน ุฃุจุฏุงู ุฃู ุฑููุฒ ุชูุณูู ูุซู \`\`\`html ูู ุจุฏุงูุฉ ุฑุฏู. ูุฌุจ ุฃู ูุจุฏุฃ ุฑุฏู ูุจุงุดุฑุฉ ุจูุณู \`<h3>\`.
    `;

  // **PAYLOAD UPDATE**: Constructing a multimodal payload with text and image.
  // **ุชุญุฏูุซ ุงูุญูููุฉ**: ุจูุงุก ุญูููุฉ ูุชุนุฏุฏุฉ ุงููุณุงุฆุท ุชุญุชูู ุนูู ูุต ูุตูุฑุฉ.
  const parts = [{ text: htmlPrompt }];
  if (imageData) {
    parts.push({
      inline_data: {
        mime_type: "image/jpeg",
        data: imageData
      }
    });
  }

  const payload = {
    contents: [{ parts: parts }],
    generationConfig: {
      temperature: 0.5,
    },
  };

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      console.error("๐ฅ Gemini API Error Response:", errorBody);
      throw new Error(errorBody.error?.message || `API request failed: ${response.statusText}`);
    }

    const result = await response.json();
    const reportHtml = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!reportHtml) {
      throw new Error("ูู ูุชููู ุงููููุฐุฌ ูู ุฅูุดุงุก ุงูุชูุฑูุฑ.");
    }
    
    return res.status(200).json({ htmlReport: reportHtml });

  } catch (err) {
    console.error("๐ฅ Server-side Error:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
      detail: err.message,
    });
  }
}
