// /api/gpt.js

/**
 * @description Serverless API endpoint to generate a structured JSON medical insurance review.
 * This version uses Google's Gemini API with a specific JSON schema in the response configuration
 * to ensure a valid, parseable JSON object is always returned, matching the frontend's requirements.
 *
 * ุชู ุชุญุฏูุซ ูุฐุง ุงูููุฏ ููุณุชุฎุฏู Gemini API ูุน ุชุญุฏูุฏ ูุฎุทุท JSON ูู ุงูุฅุนุฏุงุฏุงุช ูุถูุงู
 * ุงูุญุตูู ุนูู ุฑุฏ ุจุตูุบุฉ JSON ููุธูุฉ ุชุชูุงูู ูุน ูุชุทูุจุงุช ุงููุงุฌูุฉ ุงูุฃูุงููุฉ.
 */
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  // Handle preflight OPTIONS request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  // Ensure the request method is POST
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const {
    diagnosis,
    symptoms,
    age,
    gender,
    smoker,
    beforeProcedure,
    afterProcedure,
  } = req.body;

  // Validate that all required fields are present
  if (
    !diagnosis ||
    !symptoms ||
    !age ||
    !gender ||
    smoker === undefined ||
    !beforeProcedure ||
    !afterProcedure
  ) {
    return res.status(400).json({ error: "ุงูุฑุฌุงุก ููุก ุฌููุน ุงูุญููู." });
  }

  // Use the Gemini API key from Vercel's environment variables.
  const apiKey = process.env.GEMINI_API_KEY;
  // **MODEL UPGRADE**: Switched to gemini-1.5-pro-latest for higher quality, in-depth analysis.
  // **ุชุฑููุฉ ุงููููุฐุฌ**: ุชู ุงูุชุบููุฑ ุฅูู gemini-1.5-pro-latest ููุญุตูู ุนูู ุชุญููู ุฃุนูู ูุฃุนูู ุฌูุฏุฉ.
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;

  // **CRITICAL PROMPT & SCHEMA OVERHAUL**: The prompt and schema are now completely redesigned
  // to force the model to produce a detailed, critical, and structured report identical
  // to the user's desired example.
  // **ุฅุตูุงุญ ุดุงูู ููุชุนูููุงุช ูุงููููู**: ุชู ุฅุนุงุฏุฉ ุชุตููู ุงูุชุนูููุงุช ููููู JSON ุจุงููุงูู
  // ูุฅุฌุจุงุฑ ุงููููุฐุฌ ุนูู ุฅูุชุงุฌ ุชูุฑูุฑ ููุตู ูููุฏู ูููุธู ูุทุงุจู ุชูุงููุง ูููุซุงู ุงููุทููุจ.
  const jsonPrompt = `
    ุฃูุช "ูุฏูู ุทุจู ูุงูู ุฎุจูุฑ" ููููุชู ุชุญููู ุงููุทุงูุจุงุช ุงูุชุฃููููุฉ ูุนูุงุฏุฉ ุทุจูุฉ. ูุฏูู ูู ููุฏ ุงูุฅุฌุฑุงุกุงุช ุงูุญุงููุฉุ ุชุญุฏูุฏ ุงููุฎุงุทุฑ ุงููุงููุฉุ ูุชูุฏูู ุฎุทุฉ ุนูู ูุงุถุญุฉ ูููุตูุฉ ูุฒูุงุฏุฉ ุงูุฅูุฑุงุฏุงุช ุจุดูู ูุจุฑุฑ ุทุจููุง ููุชูุงูู ูุน ุงูุจุฑูุชููููุงุช. ูุฌุจ ุฃู ูููู ุชุญูููู ุนูููุงูุ ุฏูููุงูุ ูุฃู ุชุชุจุน ูููู ุงูู JSON ุงููุทููุจ ุจุญุฐุงููุฑู.

    **ุจูุงูุงุช ุงูุญุงูุฉ ูุชุญููููุง:**
    - ุงูุชุดุฎูุต ุงููููุชุฑ: ${diagnosis}
    - ุงูุฃุนุฑุงุถ: ${symptoms}
    - ุงูุนูุฑ: ${age}
    - ุงูุฌูุณ: ${gender}
    - ูุฏุฎู: ${smoker ? 'ูุนู' : 'ูุง'}
    - ุงูุฅุฌุฑุงุกุงุช ุงููุชุฎุฐุฉ (ูุจู ูุจุนุฏ ุงูุชุดุฎูุต): ${beforeProcedure}, ${afterProcedure}

    ---
    **ูููุฌูุฉ ุงูุชุญููู ุงููุทููุจุฉ (ููุฑ ุจูุฐู ุงูุทุฑููุฉ):**

    1.  **ุงูููุฎุต ุงูููุฏู (criticalSummary):** ุงุจุฏุฃ ุจูุธุฑุฉ ููุฏูุฉ. ูู ุงูุชุดุฎูุต ุงููููุชุฑ ุฏููู ุฃู ุนุงู (ูุซู Z01.0)ุ ูู ุงูุฃุฏููุฉ ุชุชูุงุณุจ ูุน ุงูุชุดุฎูุตุ ูู ููุงู ุชูุตูุฑ ูุงุถุญุ
    2.  **ุชุญููู ุงูุฅุฌุฑุงุกุงุช ุงูุญุงููุฉ (proceduresAnalysis):** ุญูู **ูู** ุฅุฌุฑุงุก ุชู ุงุชุฎุงุฐู. ูู ูู ูุจุฑุฑุ ูุง ูู ุงูููุงุญุธุงุช ุงููุงูุฉ ุนูููุ
    3.  **ุชุญููู ูุฎุงุทุฑ ุงูุฑูุถ (insuranceRejectionAnalysis):** ูู ูุญุฏุฏุงู. ูุง ูู ุงูุฅุฌุฑุงุก ุงููุนุฑุถ ููุฑูุถุ ููุงุฐุงุ ูู ูููุชูุ
    4.  **ุงูุชุฑุงุญุงุช ุงูุชุญุณูู (revenueImprovementSuggestions):** ูุฐุง ูู ุงูุฌุฒุก ุงูุฃูู. ุงูุชุฑุญ ูุญูุตุงุช ูุงุณุชุดุงุฑุงุช ุฅุถุงููุฉ **ูุจุฑุฑุฉ ุทุจูุงู** ุชู ุฅุบูุงููุง. ููู ุงูุชุฑุงุญุ ุงุดุฑุญ ุฃูููุชูุ ูููุชูุ ูููุงุฐุง ูุง ูููู ููุชุฃููู ุฑูุถู.
    5.  **ุงูุชูุตูุงุช ุงูุนุงูุฉ (generalRecommendations):** ูุฏู ูุตุงุฆุญ ุนุงูุฉ ูุชุญุณูู ุงูุชุฑููุฒ ูุงูุชูุซูู.

    ุงูุขูุ ูู ุจุชุนุจุฆุฉ ูููู ุงูู JSON ุงูุชุงูู ุจูุฐุง ุงูุชุญููู ุงูุนููู.
    `;

  const payload = {
    contents: [{ role: "user", parts: [{ text: jsonPrompt }] }],
    generationConfig: {
      temperature: 0.4,
      responseMimeType: "application/json",
      responseSchema: {
        type: "OBJECT",
        properties: {
          criticalSummary: {
            type: "STRING",
            description: "ููุฎุต ููุฏู ูุนููู ููุญุงูุฉุ ููุถุญ ููุงุท ุงูุถุนู ูุงูููุฉ ูู ุงูุฅุฏุงุฑุฉ ุงูุญุงููุฉ ููุญุงูุฉ.",
          },
          proceduresAnalysis: {
            type: "ARRAY",
            description: "ุชุญููู ููุตู ููู ุฅุฌุฑุงุก ุชู ุงุชุฎุงุฐู.",
            items: {
              type: "OBJECT",
              properties: {
                procedureName: { type: "STRING", description: "ุงุณู ุงูุฅุฌุฑุงุก ุฃู ุงูุฏูุงุก ุงูุฐู ุชู ุชุญูููู." },
                justification: { type: "STRING", description: "ูู ุงูุฅุฌุฑุงุก ูุจุฑุฑ ุทุจูุงู ุฃู ูุง." },
                notes: { type: "STRING", description: "ููุงุญุธุงุช ููุฏูุฉ ูุงูุฉุ ูุซู ุนุฏู ุชุทุงุจู ุงูุฏูุงุก ูุน ุงูุชุดุฎูุต ุงูุนุงู." },
              },
              required: ["procedureName", "justification", "notes"],
            },
          },
          insuranceRejectionAnalysis: {
            type: "OBJECT",
            description: "ุชุญููู ููุตู ููุฎุงุทุฑ ุงูุฑูุถ ูู ุดุฑูุฉ ุงูุชุฃููู.",
            properties: {
              riskLevel: { type: "STRING", description: "ูุณุชูู ุงูุฎุทุฑ: 'ููุฎูุถ', 'ูุชูุณุท', 'ูุฑุชูุน', 'ุนุงูู ุฌุฏุงู'." },
              itemsAtRisk: {
                type: "ARRAY",
                items: {
                  type: "OBJECT",
                  properties: {
                    itemName: { type: "STRING", description: "ุงุณู ุงูุฅุฌุฑุงุก ุฃู ุงูุฏูุงุก ุงููุนุฑุถ ููุฑูุถ." },
                    value: { type: "STRING", description: "ูููุฉ ุงูุจูุฏ ุจุงูุฑูุงู ุงูุณุนูุฏู." },
                    reason: { type: "STRING", description: "ุงูุณุจุจ ุงูุชูุตููู ูุงุญุชูุงููุฉ ุงูุฑูุถ." },
                  },
                  required: ["itemName", "value", "reason"],
                },
              },
              totalValueAtRisk: { type: "STRING", description: "ุฅุฌูุงูู ุงููููุฉ ุงููุงููุฉ ุงููุนุฑุถุฉ ููุฑูุถ ุจุงูุฑูุงู ุงูุณุนูุฏู." },
            },
            required: ["riskLevel", "itemsAtRisk", "totalValueAtRisk"],
          },
          revenueImprovementSuggestions: {
            type: "OBJECT",
            description: "ุฎุทุฉ ุนูู ููุตูุฉ ูุฒูุงุฏุฉ ุงูุฅูุฑุงุฏุงุช ุจุดูู ูุจุฑุฑ ุทุจูุงู.",
            properties: {
              suggestions: {
                type: "ARRAY",
                items: {
                  type: "OBJECT",
                  properties: {
                    title: { type: "STRING", description: "ุงุณู ุงูุฅุฌุฑุงุก ุฃู ุงูุงุณุชุดุงุฑุฉ ุงูููุชุฑุญุฉ." },
                    description: { type: "STRING", description: "ุดุฑุญ ุนููู ููุฃูููุฉ ุงูุทุจูุฉ ููุฅุฌุฑุงุก ุงูููุชุฑุญ." },
                    estimatedValue: { type: "STRING", description: "ุงููููุฉ ุงูุชูุฏูุฑูุฉ ููุฅุฌุฑุงุก ุจุงูุฑูุงู ุงูุณุนูุฏู." },
                    whyNotRejectable: { type: "STRING", description: "ุญุฌุฉ ูููุฉ ููููุนุฉ ูุดุฑูุฉ ุงูุชุฃููู ุชููุน ุฑูุถ ุงูุฅุฌุฑุงุก." },
                  },
                  required: ["title", "description", "estimatedValue", "whyNotRejectable"],
                },
              },
              potentialIncrease: { type: "STRING", description: "ุฅุฌูุงูู ุงูุฒูุงุฏุฉ ุงููุญุชููุฉ ูู ุงูุฅูุฑุงุฏุงุช ุจุงูุฑูุงู ุงูุณุนูุฏู." },
            },
            required: ["suggestions", "potentialIncrease"],
          },
          generalRecommendations: {
            type: "STRING",
            description: "ุชูุตูุงุช ุนุงูุฉ ูุดุงููุฉ ูุชุญุณูู ุงูุฃุฏุงุก ูุงูุชุฑููุฒ ูุงูุชูุซูู ูู ุงููุณุชูุจู.",
          },
        },
        required: [
          "criticalSummary",
          "proceduresAnalysis",
          "insuranceRejectionAnalysis",
          "revenueImprovementSuggestions",
          "generalRecommendations",
        ],
      },
    },
  };

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      console.error("๐ฅ Gemini API Error Response:", errorBody);
      throw new Error(`API request failed: ${errorBody.error?.message || response.statusText}`);
    }

    const result = await response.json();
    const rawJsonString = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!rawJsonString) {
      throw new Error("ูู ูุชููู ุงููููุฐุฌ ูู ุฅูุดุงุก ุฑุฏ JSON.");
    }

    const parsedPayload = JSON.parse(rawJsonString);
    
    return res.status(200).json(parsedPayload);

  } catch (err) {
    console.error("๐ฅ Server-side Error:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
      detail: err.message,
    });
  }
}
