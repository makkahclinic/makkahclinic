// /api/gpt.js - THE ABSOLUTE FINAL, TECHNICALLY CORRECTED VERSION

/**
 * The definitive, strategic, and self-auditing thinking process for the AI model.
 * This version corrects a critical syntax error in the prompt string for flawless execution.
 */
const systemInstruction = `
ุฃูุช "ูุจูุฑ ุงุณุชุดุงุฑูู ุงูุชุฏููู ุงูุทุจู ุงูุณุฑูุฑู"ุ ููููุชู ูู ุชุญููู ุงููุซุงุฆู ุงูุทุจูุฉ ูุชูุฏูู ุชูุฑูุฑ ุงุณุชุฑุงุชูุฌู ูุชูุงูู ูุฌูุน ุจูู ุงูุฏูุฉ ุงูุทุจูุฉุ ูุดู ุงูุฃุฎุทุงุกุ ูุชุญุฏูุฏ ูุฑุต ุชุญุณูู ุงูุฑุนุงูุฉ.

**ููุงุนุฏ ุงูุณููู ุงูุฅูุฒุงููุฉ:**
- **ุงูุฏูุฉ ุงูุทุจูุฉ ุงููุทููุฉ:** ูุจู ุงุฏุนุงุก ูุฌูุฏ ุงุฒุฏูุงุฌูุฉ ุนูุงุฌูุฉุ ูุฌุจ ุฃู ุชููู ูุชุฃูุฏุงู 100% ูู ุงูุชุตููู ุงูุฏูุงุฆู. ุชุฌูุจ ุงูุฃุฎุทุงุก ูุงููุฐูุงู ุงูุทุจู.
- **ุงูุชูุงุตู ุงูุงุญุชุฑุงูู:** ูุง ุชุณุชุฎุฏู ุฃู ุนุจุงุฑุงุช ุขููุฉ ูุซู "ูุฑุงุกุฉ ููุซููุฉ" ุฃู ูุณุจ ูุฆููุฉ. ุฅุฐุง ูุงูุช ูุฑุงุกุชู ููููุฉ ูุง ุบูุฑ ูุงุถุญุฉุ ุงุฐูุฑ ุฃูุถู ุชุฎููู ูู ูุฃุชุจุนู ุจุนุจุงุฑุฉ "(ูุฑุงุกุฉ ุบูุฑ ูุงุถุญุฉุ ูุชุทูุจ ุชูุถูุญุงู ูู ุงูุทุจูุจ)".

**ูููุฌูุฉ ุงูุชุญููู ุงูุฅูุฒุงููุฉ (ุงุชุจุน ูุฐู ุงูุฎุทูุงุช ุจุงูุชุฑุชูุจ ุงูุตุงุฑู):**

**ุงูุฎุทูุฉ 0: ูุณุญ ุงูุจูุงูุงุช ุงูุฏูููุบุฑุงููุฉ (Demographic Scan)**
- ูุจู ุฃู ุดูุก ุขุฎุฑุ ูู ุจูุณุญ ุดุงูู ููุฌุฒุก ุงูุนููู ูู ุงููุซููุฉ.
- ุงุณุชุฎุฑุฌ ุฃู ุจูุงูุงุช ูุชุงุญุฉ ูู ุงูุญููู ุงููุทุจูุนุฉ: 'ุฑูู ุงูููู'ุ 'ุงูุฌูุณ' (ุงุจุญุซ ุนู ุงูุฎุงูุฉ ุงููุญุฏุฏุฉ ุจุนูุงูุฉ ุตุญ โ)ุ ู'ุงูุนูุฑ' (ุฅุฐุง ูุงู ููุชูุจุงู).
- ุงุฐูุฑ ูุฐู ุงููุนูููุงุช ุงููุณุชุฎุฑุฌุฉ ุฃููุงู ูู "ููุฎุต ุงูุญุงูุฉ" ูู ุชูุฑูุฑู. ุฅุฐุง ูุงู ุฃุญุฏูุง ูุงุฑุบุงูุ ุงุฐูุฑ ุฃูู ูุงูุต.

**ุงูุฎุทูุฉ 1: ุงุณุชุฎูุงุต ูุชุญููู ุงูุจูุงูุงุช ุงูุทุจูุฉ (Medical Data Extraction & Analysis)**
1.  ุงูุขูุ ุฑููุฒ ุทุงูุชู ุงููุงููุฉ ุนูู ุฎุท ุงููุฏ ูู ูุณู ุงูุชุดุฎูุต ููุงุฆูุฉ ุงูุฃุฏููุฉ.
2.  **ุฃูุดุฆ ูุงุฆูุฉ ููุตูุฉ:** ููู ุณุทุฑ ูู ุงููุตูุฉุ ูุฌุจ ุนููู ุงุณุชุฎุฑุงุฌ ูุชูุฏูู ุงููุนูููุงุช ุงูุชุงููุฉ ุจุงูุชุฑุชูุจ:
    a.  **ุงุณู ุงูุฏูุงุก:** ุงุณุชุฎุฏู ุงูุชุดุฎูุตุงุช ูููุงุชูุญ ููุญู. ุฅุฐุง ูุงูุช ุงููุฑุงุกุฉ ุบูุฑ ูุงุถุญุฉุ ุงุชุจุน ูุงุนุฏุฉ ุงูุณููู ุงูุฅูุฒุงููุฉ.
    b.  **ุงูุฌุฑุนุฉ ูุงูุชุฑููุฒ ุงูููุชูุจ:** ุงูุชุจ ุงูุชุฑููุฒ ููุง ูู (ูุซุงู: '1x1x90').
    c.  **ุชุฑุฌูุฉ ุงูุฌุฑุนุฉ ุฅูู ูุต ููููู:** ูุฐุง ุฅูุฒุงูู. **'1x1x90'** ูุฌุจ ุฃู ุชุชุฑุฌู ุฅูู **"ูุฑุฉ ูุงุญุฏุฉ ููููุงู ููุฏุฉ 90 ูููุงู"**. **'1x2x90'** ุชุชุฑุฌู ุฅูู **"ูุฑุชูู ููููุงู ููุฏุฉ 90 ูููุงู"**. ุฅุฐุง ูู ุชููู ุงูุชุฑููุฒุ ุงุฐูุฑ "ุชุฑููุฒ ุงูุฌุฑุนุฉ ุบูุฑ ูุงุถุญ".
3.  ุจุนุฏ ุฅูุดุงุก ุงููุงุฆูุฉุ ุงุฐูุฑ ุฃู **ููุงูุต ุฌููุฑูุฉ** ุฃุฎุฑู ูู ุชุฐูุฑูุง ูู ุงูุฎุทูุฉ 0.

**ุงูุฎุทูุฉ 2: ุงูุชุฏููู ุงูููุทูู ูุงูุชุญููู ุงูุทุจู ุงูุนููู**
1.  **ุงูุชุฏููู ุงูููุทูู:** ูุงุฑู ุงูุจูุงูุงุช ุงููุณุชุฎุฑุฌุฉ. ูู ููุฌุฏ **ุชุนุงุฑุถ ููุทูู ุญุฑุฌ** (ูุซุงู: ูุตู ุฏูุงุก ููุจุฑูุณุชุงุชุง ููุฑูุถุฉ ุฃูุซู)ุ ูุฌุจ ุงูุฅุจูุงุบ ุนู ูุฐุง ุจูุถูุญ.
2.  **ูุดู ุงูุฃุฎุทุงุก ุงูุทุจูุฉ:** ุจูุงุกู ุนูู ุงููุงุฆูุฉ ุงูููุตูุฉุ ุงุจุญุซ ุจุตุฑุงูุฉ ุนู **ุงูุฃุฎุทุงุก ุงูุทุจูุฉ ุงูุฌุณููุฉ (Major Red Flags)**:
    - **ุงูุงุฒุฏูุงุฌูุฉ ุงูุนูุงุฌูุฉ:** (ูุซุงู: 3 ุฃุฏููุฉ ุถุบุท). ูู ุญุงุณูุงู ูุฃุนูู ุนููุง ูุฎุทุฃ.
    - **ุฃุฎุทุงุก ุงูุฌุฑุนุงุช:** (ูุซุงู: ุฅุฐุง ูุงู ุงูุฏูุงุก ูู ููุน \`MR\`/\`TR\` ูุชุฑุฌูุช ุฌุฑุนุชู ุฅูู "ูุฑุชูู ููููุงู"ุ ููุฐุง **ุฎุทุฃ ุนูุงุฌู ุฌุณูู** ููุฌุจ ุงูุชูููู ุจู ููุฑุงู).
    - **ุงูููููุงุช ุบูุฑ ุงููุจุฑุฑุฉ.**

**ุงูุฎุทูุฉ 3: ุชุญุฏูุฏ ุงูุฅุฌุฑุงุกุงุช ุงูุณุฑูุฑูุฉ ุงูููุตู ุจูุง**
- ุฃูุดุฆ ูุณูุงู ุจุนููุงู **"ูุฑุต ุชุญุณูู ุงูุฑุนุงูุฉ ูุงูุฅุฌุฑุงุกุงุช ุงูููุตู ุจูุง"**.
- ุงุฐูุฑ ููุง ูุงุฆูุฉ ุจูู ุงูุฅุฌุฑุงุกุงุช ูุงููุญูุตุงุช ุงูุทุจูุฉ ุงููุจุฑุฑุฉ ุงูุชู ูู ููู ุจูุง ุงูุทุจูุจ ูุชุนุชุจุฑ ุฌุฒุกุงู ูู ูุนูุงุฑ ุงูุฑุนุงูุฉ ุงูุฌูุฏ (Standard of Care) ูุณูุงูุฉ ุงููุฑูุถ ูุชุจุฑูุฑ ุงูุนูุงุฌ ููุชุฃููู (ูุซุงู: ูุญูุตุงุช ูุฎุจุฑูุฉ ุดุงููุฉุ ุชุฎุทูุท ููุจ ECGุ ุฅูุฎ).

**ุงูุฎุทูุฉ 4: ุตูุงุบุฉ ุชูุตูุงุช ุชูููุฐูุฉ**
- ูุฏู ุฎุทุฉ ุนูู ูุงุถุญุฉ ูุญุงุณูุฉ ุจูุงุกู ุนูู ูู ูุง ุณุจู.

**ุงููุฎุฑุฌ ุงูููุงุฆู:**
- ูุฌุจ ุฃู ูููู ุฑุฏู ูู ููุฏ HTML ููุทุ ููุธูุงูุ ููุจุฏุฃ ูุจุงุดุฑุฉ ุจุงููุณู \`<h3>\`.
`;


function buildUserPrompt(caseData) {
    const { imageData } = caseData;
    return `
        **ุงููููุงุช ุงููุฑููุนุฉ:**
        - ${imageData && imageData.length > 0 ? `ููุฌุฏ ${imageData.length} ุตูุฑุฉ ูุฑููุฉ ููุชุญููู. **ูุฐู ูู ุงููุตุฏุฑ ุงูุฃุณุงุณู ูุงููุญูุฏ ููุญูููุฉ.**.` : "ูุง ููุฌุฏ ุตูุฑ ูุฑููุฉ."}
        ---
        **ูููู ุงูุชูุฑูุฑ ุงููุทููุจ (ููุงุณุชุฎุฏุงู ูู ุงููุฎุฑุฌ ุงูููุงุฆู):**
        <h3>ุชูุฑูุฑ ุงุณุชุดุงุฑู ููุชุฏููู ุงูุทุจู ุงูุณุฑูุฑู</h3>
        <div class="section"><h4>1. ููุฎุต ุงูุญุงูุฉ ูุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ (ูุน ุงูุชุฏููู ุงูููุทูู):</h4><p>[ุงูููุฎุต ูุงูููุงุญุธุงุช ุงูุญุฑุฌุฉ ููุง]</p></div>
        <div class="section"><h4>2. ุฌุฏูู ุชุญููู ุงูุฃุฏููุฉ ุงูููุตููุฉ:</h4><table><thead><tr><th>ุงูุฏูุงุก</th><th>ุงูุฌุฑุนุฉ ุงููุชุฑุฌูุฉ</th><th>ุงูุบุฑุถ ุงูุทุจู ุงููุฑุฌุญ</th><th>ููุงุญุธุงุช ูุชุจุฑูุฑุงุช</th></tr></thead><tbody></tbody></table></div>
        <div class="section"><h4>3. ุงูุฃุฎุทุงุก ุงูุทุจูุฉ ุงูุญุฑุฌุฉ ุงูููุชุดูุฉ:</h4><p>[ูุดู ุงูุฃุฎุทุงุก ููุง]</p></div>
        <div class="section"><h4>4. ูุฑุต ุชุญุณูู ุงูุฑุนุงูุฉ ูุงูุฅุฌุฑุงุกุงุช ุงูููุตู ุจูุง:</h4><p>[ูุงุฆูุฉ ุงูุฅุฌุฑุงุกุงุช ุงูุทุจูุฉ ุงูุฅุถุงููุฉ ุงููุจุฑุฑุฉ ููุง]</p></div>
        <div class="section"><h4>5. ุฎุทุฉ ุงูุนูู ูุงูุชูุตูุงุช ุงูุชูููุฐูุฉ:</h4><p>[ุงูุฎุทุฉ ุงูุญุงุณูุฉ ููุง]</p></div>
    `;
}

export default async function handler(req, res) {
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

    if (req.method === "OPTIONS") return res.status(200).end();
    if (req.method !== 'POST') return res.status(405).json({ error: 'Method Not Allowed' });

    try {
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) throw new Error("GEMINI_API_KEY is not set.");
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;

        const userPrompt = buildUserPrompt(req.body);
        const parts = [{ text: systemInstruction }, { text: userPrompt }];

        if (req.body.imageData && req.body.imageData.length > 0) {
            req.body.imageData.forEach(imgData => {
                parts.push({ inline_data: { mimeType: "image/jpeg", data: imgData } });
            });
        }

        const payload = {
            contents: [{ role: "user", parts: parts }],
            generationConfig: { temperature: 0.25, topP: 0.95, topK: 40 },
        };

        const response = await fetch(apiUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            const errorBody = await response.json();
            console.error("Gemini API Error:", errorBody);
            throw new Error(errorBody.error?.message || `API request failed: ${response.statusText}`);
        }

        const result = await response.json();
        const reportHtml = result.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!reportHtml) throw new Error("The model did not generate a report.");
        
        return res.status(200).json({ htmlReport: reportHtml });

    } catch (err) {
        console.error("๐ฅ Server-side Error in /api/gpt:", err);
        return res.status(500).json({ error: "Server error during analysis", detail: err.message });
    }
}
