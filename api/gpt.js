// main/api/gpt.js

/**
 * @description Serverless API endpoint to generate a detailed medical insurance review report.
 * This version is upgraded to use Google's Gemini API and features a highly-detailed,
 * structured prompt to ensure the output matches a professional report format.
 *
 * ุชู ุชุทููุฑ ูุฐุง ุงูููุฏ ูุงุณุชุฎุฏุงู Gemini API ูู Google ูุน ุชุนูููุงุช ููุตูุฉ ูุถูุงู ุฌูุฏุฉ ุงูุชูุฑูุฑ.
 */
export default async function handler(req, res) {
  // Set CORS headers to allow requests from any origin
  // ุฅุนุฏุงุฏุงุช CORS ููุณูุงุญ ุจุงูุทูุจุงุช ูู ุฃู ูุตุฏุฑ
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  // Handle preflight OPTIONS request
  // ูุนุงูุฌุฉ ุทูุจ OPTIONS
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  // Ensure the request method is POST
  // ุงูุชุฃูุฏ ูู ุฃู ุงูุทูุจ ูู ููุน POST
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const {
    diagnosis,
    symptoms,
    age,
    gender,
    smoker,
    beforeProcedure,
    afterProcedure,
  } = req.body;

  // Validate that all required fields are present
  // ุงูุชุญูู ูู ูุฌูุฏ ุฌููุน ุงูุญููู ุงููุทููุจุฉ ูู ุงูุทูุจ
  if (
    !diagnosis ||
    !symptoms ||
    !age ||
    !gender ||
    smoker === undefined ||
    !beforeProcedure ||
    !afterProcedure
  ) {
    return res.status(400).json({ error: "ุงูุฑุฌุงุก ููุก ุฌููุน ุงูุญููู." });
  }

  // The Gemini API key should be left as an empty string.
  // The Canvas environment will automatically provide the key.
  // ูุฌุจ ุชุฑู ููุชุงุญ Gemini API ูุงุฑุบูุงุ ุญูุซ ุณูุชู ุชูููุฑู ุชููุงุฆููุง ูู ุจูุฆุฉ ุงูุนูู
  const apiKey = "";
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  // This is the core of the improvement. The prompt is meticulously structured
  // to force the AI to generate a report with the exact sections and details
  // from the user's desired sample report.
  //
  // ูุฐุง ูู ุฌููุฑ ุงูุชุญุณูู. ุชู ุชุตููู ุงูุชุนูููุงุช (Prompt) ุจุฏูุฉ ูุงุฆูุฉ ูุฅุฌุจุงุฑ ุงููููุฐุฌ
  // ุนูู ุฅูุดุงุก ุชูุฑูุฑ ุจููุณ ุงูุฃูุณุงู ูุงูุชูุงุตูู ุงูููุฌูุฏุฉ ูู ุงูุนููุฉ ุงููุทููุจุฉ.
  const detailedPrompt = `
    **ูููุชู:** ุฃูุช ุฎุจูุฑ ุงุณุชุดุงุฑู ูู ุงููุฑุงุฌุนุฉ ุงูุทุจูุฉ ูุดุฑูุงุช ุงูุชุฃููู. ุนููู ุฅูุดุงุก ุชูุฑูุฑ ุทุจู ุชุฃูููู ููุตูุ ุงุญุชุฑุงููุ ูููุถูุนู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู. ูุฌุจ ุฃู ูููู ุงูุชูุฑูุฑ ุดุงููุงู ููุชุจุน ุงููููู ุงููุญุฏุฏ ุฃุฏูุงู ุจุฏูุฉ ูุชูุงููุฉ.

    **ุจูุงูุงุช ุงูุญุงูุฉ:**
    - **ุงูุชุดุฎูุต:** ${diagnosis}
    - **ุงูุฃุนุฑุงุถ ุงูุฑุฆูุณูุฉ:** ${symptoms}
    - **ุงูุนูุฑ:** ${age}
    - **ุงูุฌูุณ:** ${gender}
    - **ูุฏุฎู:** ${smoker ? "ูุนู" : "ูุง"}
    - **ุงูุฅุฌุฑุงุกุงุช ุงูููุชุฎุฐุฉ ูุจู ุงูุชุดุฎูุต:** ${beforeProcedure}
    - **ุงูุฅุฌุฑุงุกุงุช ุงูููุชุฎุฐุฉ ุจุนุฏ ุงูุชุดุฎูุต:** ${afterProcedure}

    ---

    **ูููู ุงูุชูุฑูุฑ ุงูุฅูุฒุงูู (ูุฌุจ ุงุชุจุงุนู ุญุฑูููุง):**

    # ุชูุฑูุฑ ูุฑุงุฌุนุฉ ุทุจูุฉ ุชูุตููู ูุญุงูุฉ ${diagnosis}

    ## 1. ููุฎุต ุงูุญุงูุฉ ุงูุณุฑูุฑูุฉ:
    - ุงุจุฏุฃ ุจุฐูุฑ ุนูุฑ ุงููุฑูุถุ ุฌูุณูุ ูุชุดุฎูุตู.
    - ูุฎูุต ุงูุฃุนุฑุงุถ ุงูุฑุฆูุณูุฉ ูุฃูููุชูุง ุงูุณุฑูุฑูุฉุ ูุน ุงูุชุฑููุฒ ุนูู ุฃู ุนูุงูุงุช ุฎุทูุฑุฉ (ุฃุนูุงู ุญูุฑุงุก).
    - ุงุฐูุฑ ุงูุนูุงูู ุงููุคุซุฑุฉ ูุซู ุงูุชุฏุฎูู ุฃู ุบูุงุจ ุชุงุฑูุฎ ุทุจู ุณุงุจู.

    ## 2. ูุฑุงุฌุนุฉ ูุชูููู ุงูุฅุฌุฑุงุกุงุช ุงูุทุจูุฉ ุงููุชุฎุฐุฉ:
    - ููู ุฅุฌุฑุงุก ุชู ุงุชุฎุงุฐู (ูุจู ูุจุนุฏ ุงูุชุดุฎูุต)ุ ูู ุจุชุญูููู ูููุทุฉ ูููุตูุฉ.
    - **ุงูุชูููู ุงููููู:** ูููู ุงูุฅุฌุฑุงุก ุจูุถูุญ. ูู ูู ูุจุฑุฑ ุทุจููุง ููุชูุงูู ูุน ุงููุนุงููุฑ ุงูุนุงูููุฉ (ูุซู ADA, AAO, WHO)ุ
    - **ุชุญููู ุงูุชุฃููู:** ุงุดุฑุญ ุจุงูุชูุตูู ููุงุฐุง ูุฏ ุชุฑูุถ ุดุฑูุฉ ุงูุชุฃููู ุชุบุทูุฉ ุชูููุฉ ุงูุฅุฌุฑุงุก ุฅุฐุง ูุงู ุบูุฑ ูุจุฑุฑ. ุฑูุฒ ุนูู ููุงููู "ุบูุงุจ ุงูุถุฑูุฑุฉ ุงูุทุจูุฉ" ู"ุนุฏู ุงุชุจุงุน ุงูุจุฑูุชููููุงุช ุงููุนุชูุฏุฉ".

    ## 3. ุงูุฎุทุฉ ุงูุนูุงุฌูุฉ ุงููุซูู (ูุง ูุงู ูุฌุจ ูุนูู):
    - ูุฐุง ูู ุงููุณู ุงูุฃูู. ูุฌุจ ุฃู ูููู ููุตูุงู ูุนููููุง.
    - ุงูุชุฑุญ ุฎุทุฉ ุฑุนุงูุฉ ุดุงููุฉ ูุจุฏููุฉ ููุง ุชู. ููู ุงูุชุฑุงุญุ ูุฌุจ ุฃู ุชูุถุญ:
      - **ุงูุฅุฌุฑุงุก ุงูููุชุฑุญ:** ุตู ุงูุฅุฌุฑุงุก ุจูุถูุญ (ูุซุงู: ุชุตููุฑ ููุทุนู ููุดุจููุฉ OCTุ ูุญุต HbA1cุ ุชุฎุทูุท ููุจ ECG).
      - **ุงูุถุฑูุฑุฉ ุงูุทุจูุฉ:** ุงุดุฑุญ ููุงุฐุง ูุฐุง ุงูุฅุฌุฑุงุก ุญููู ููุฐู ุงูุญุงูุฉ ุชุญุฏูุฏูุง ููุงุฐุง ููุดู.
      - **ุงููููุฉ ุงูุชูุฏูุฑูุฉ:** ุญุฏุฏ ุชูููุฉ ุชูุฏูุฑูุฉ **ุจุงูุฑูุงู ุงูุณุนูุฏู (SAR)**.
      - **ูุจุฑุฑุงุช ุนุฏู ุงูุฑูุถ ุงูุชุฃูููู:** ุงุดุฑุญ ุจููุฉ ููุงุฐุง ูุฐุง ุงูุฅุฌุฑุงุก ุถุฑูุฑู ุทุจููุง ููุง ูููู ูุดุฑูุฉ ุงูุชุฃููู ุฑูุถู.
      - **ุงููุฑุฌุนูุฉ ุงูุนูููุฉ:** ุงุณุชุดูุฏ ุจุจุฑูุชููููุงุช ุทุจูุฉ ูุนุฑููุฉ (ADA, AHA/ACC, EASD) ูุฏุนู ุชูุตูุชู.
    - **ูุฌุจ ุฃู ุชุดูู ุงูุชุฑุงุญุงุชู:**
      - ูุญูุตุงุช ุชุดุฎูุตูุฉ ูุชูุฏูุฉ ููุญุฏุฏุฉ.
      - ุฅุญุงูุงุช ุฅูู ุชุฎุตุตุงุช ุฏูููุฉ (ุทุจูุจ ุนูููุ ุฃุฎุตุงุฆู ุบุฏุฏ ุตูุงุก).
      - ุฎุทุฉ ุนูุงุฌ ุฏูุงุฆู (ูุซู Metformin ูุฎุท ุฃูู).
      - ุชุนุฏููุงุช ุนูู ููุท ุงูุญูุงุฉ ูุชุซููู ุตุญู.

    ## 4. ุงูุชุฃุซูุฑ ุงูุฅูุฌุงุจู ุนูู ุงูุนูุงุฏุฉ ูุงูุชุฃููู:
    - ูุถุญ ููู ุฃู ุงุชุจุงุน ุงูุฎุทุฉ ุงููุซูู ุงูููุชุฑุญุฉ ูุนูุฏ ุจุงูููุน ุนูู ุงูุนูุงุฏุฉ.
    - ุฑูุฒ ุนูู ุฒูุงุฏุฉ ุงูููุงููุงุช ุงูุชุฃููููุฉุ ุชุญุณูู ุณูุนุฉ ุงูุนูุงุฏุฉุ ููู ุงูุฅูุฑุงุฏุงุช ุจุดูู ูุดุฑูุนุ ูุชูููู ุงููุฎุงุทุฑ ุงููุงููููุฉ.

    ## 5. ุงูุฎูุงุตุฉ:
    - ูุฎุต ุงููุชุงุฆุฌ ุงูุฑุฆูุณูุฉ ููุชูุฑูุฑ.
    - ุฃููุฏ ูุฌุฏุฏูุง ุนูู ุงููุฑู ุงูุฌููุฑู ุจูู ุงูููุฌ ุงููุชุจุน ูุงูููุฌ ุงูููุตู ุจู ูุชุฃุซูุฑ ุฐูู ุนูู ุตุญุฉ ุงููุฑูุถ.

    **ุดุฑูุท ุตุงุฑูุฉ:**
    - **ุงููุบุฉ:** ุนุฑุจูุฉ ูุตุญู ููุท.
    - **ุงูุฃุณููุจ:** ุฑุณููุ ุณุฑุฏูุ ุชูุตูููุ ูููุถูุนู.
    - **ุงูุทูู:** ูุฌุจ ุฃูุง ููู ุงูุชูุฑูุฑ ุนู 800 ูููุฉ ูุถูุงู ุชุบุทูุฉ ุฌููุน ุงูุฌูุงูุจ ุจุนูู.
    - **ุงูุชูุณูู:** ุงุณุชุฎุฏู Markdown ููุนูุงููู ูุงูููุงุท ูุณูููุฉ ุงููุฑุงุกุฉ.
    `;

  const payload = {
    contents: [
      {
        role: "user",
        parts: [{ text: detailedPrompt }],
      },
    ],
    generationConfig: {
      temperature: 0.3,
      topP: 1.0,
      topK: 32,
      maxOutputTokens: 4096, // ุฒูุงุฏุฉ ุนุฏุฏ ุงูุชูููุฒ ููุณูุงุญ ุจุชูุงุฑูุฑ ุทูููุฉ
    },
  };

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      // Handle non-successful responses from the API
      // ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ูู ุญุงู ุนุฏู ูุฌุงุญ ุงูุทูุจ
      const errorBody = await response.json();
      console.error("๐ฅ Gemini API Error Response:", errorBody);
      throw new Error(
        `API request failed with status ${response.status}: ${
          errorBody.error?.message || "Unknown error"
        }`
      );
    }

    const result = await response.json();

    // Extract the generated text from the Gemini response
    // ุงุณุชุฎูุงุต ุงููุต ุงููููุฏ ูู ุงุณุชุฌุงุจุฉ Gemini
    const generatedText =
      result.candidates?.[0]?.content?.parts?.[0]?.text || "";

    if (!generatedText) {
        return res.status(500).json({ error: "ูู ูุชููู ุงููููุฐุฌ ูู ุฅูุดุงุก ุฑุฏ. ูุฏ ุชููู ููุงู ูุดููุฉ ูู ุงููุญุชูู ุงููุฏุฎู." });
    }

    // Send the successful response back to the client
    // ุฅุฑุณุงู ุงูุฑุฏ ุงููุงุฌุญ ููุนููู
    return res.status(200).json({ result: generatedText });

  } catch (err) {
    console.error("๐ฅ Server-side Error:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุฅูุดุงุก ุงูุชูุฑูุฑ",
      detail: err.message,
    });
  }
}
