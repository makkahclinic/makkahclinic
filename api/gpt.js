// /api/gpt.js

/**
 * @description Serverless API endpoint to generate a structured JSON medical insurance review.
 * This version uses Google's Gemini API with a specific JSON schema in the response configuration
 * to ensure a valid, parseable JSON object is always returned, matching the frontend's requirements.
 *
 * ุชู ุชุญุฏูุซ ูุฐุง ุงูููุฏ ููุณุชุฎุฏู Gemini API ูุน ุชุญุฏูุฏ ูุฎุทุท JSON ูู ุงูุฅุนุฏุงุฏุงุช ูุถูุงู
 * ุงูุญุตูู ุนูู ุฑุฏ ุจุตูุบุฉ JSON ููุธูุฉ ุชุชูุงูู ูุน ูุชุทูุจุงุช ุงููุงุฌูุฉ ุงูุฃูุงููุฉ.
 */
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  // Handle preflight OPTIONS request
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  // Ensure the request method is POST
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const {
    diagnosis,
    symptoms,
    age,
    gender,
    smoker,
    beforeProcedure,
    afterProcedure,
  } = req.body;

  // Validate that all required fields are present
  if (
    !diagnosis ||
    !symptoms ||
    !age ||
    !gender ||
    smoker === undefined ||
    !beforeProcedure ||
    !afterProcedure
  ) {
    return res.status(400).json({ error: "ุงูุฑุฌุงุก ููุก ุฌููุน ุงูุญููู." });
  }

  // Use the Gemini API key from Vercel's environment variables.
  const apiKey = process.env.GEMINI_API_KEY;
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  // **CRITICAL CHANGE**: The prompt is now highly detailed and prescriptive to force
  // the model to generate a deep, insightful, and actionable report, not just a summary.
  // **ุชุบููุฑ ุฌููุฑู**: ุงูุชุนูููุงุช ุงูุขู ููุตูุฉ ูุชูุฌูููุฉ ููุบุงูุฉ ูุฅุฌุจุงุฑ ุงููููุฐุฌ ุนูู
  // ุฅูุดุงุก ุชูุฑูุฑ ุนููู ููููุฏ ููุงุจู ููุชูููุฐุ ูููุณ ูุฌุฑุฏ ููุฎุต.
  const jsonPrompt = `
    ุฃูุช ุฎุจูุฑ ุงุณุชุดุงุฑู ูู ุงููุฑุงุฌุนุฉ ุงูุทุจูุฉ ูุงูุชุฃูููุ ููููุชู ูุฒุฏูุฌุฉ: ุถูุงู ุฃูุถู ุฑุนุงูุฉ ูููุฑูุถ ูุชุญููู ุฃูุตู ุงุณุชูุงุฏุฉ ูุงููุฉ ูุดุฑูุนุฉ ููุนูุงุฏุฉ. ูู ุจุชุญููู ุงูุญุงูุฉ ุงูุชุงููุฉ ุจุนูู ููุฏู ุชูุฑูุฑุงู ููุตูุงู ุจุตูุบุฉ JSON. ูุง ุชูู ูุฎุชุตุฑุงู ุฃุจุฏุงู.

    **ุจูุงูุงุช ุงูุญุงูุฉ:**
    - ุงูุชุดุฎูุต: ${diagnosis}
    - ุงูุฃุนุฑุงุถ: ${symptoms}
    - ุงูุนูุฑ: ${age}
    - ุงูุฌูุณ: ${gender}
    - ูุฏุฎู: ${smoker ? 'ูุนู' : 'ูุง'}
    - ุงูุฅุฌุฑุงุกุงุช ูุจู ุงูุชุดุฎูุต: ${beforeProcedure}
    - ุงูุฅุฌุฑุงุกุงุช ุจุนุฏ ุงูุชุดุฎูุต: ${afterProcedure}

    ---
    **ุงูุชุญููู ุงููุทููุจ (ูุฌุจ ุฃู ูููู ููุตูุงู ูุนูููุงู):**

    1.  **result (ุงูููุฎุต ุงูููุฏู):**
        -   ูุฏู ููุฎุตุงู ููุฏูุงู ููุญุงูุฉ. ูุง ุชูุชูู ุจุณุฑุฏ ุงูุจูุงูุงุช.
        -   ุญูู ุงูุนูุงูุฉ ุจูู ุงูุชุดุฎูุต ูุงูุฃุนุฑุงุถ ูุงูุฅุฌุฑุงุกุงุช ุงููุชุฎุฐุฉ.
        -   ูู ููุงู ุชูุตูุฑ ูุงุถุญ ูู ุงูุฑุนุงูุฉุ ูู ุงูุฅุฌุฑุงุกุงุช ูุงููุฉ ุฃู ุณุทุญูุฉุ ูุง ูู ุงูุตูุฑุฉ ุงููุจูุฑุฉ ุงูุชู ุชุฑุงูุง ูุฎุจูุฑุ

    2.  **justification (ุชูููู ุงูุฅุฌุฑุงุกุงุช):**
        -   ููู ุฅุฌุฑุงุก ุชู ุงุชุฎุงุฐูุ ูุฏู ุชุจุฑูุฑุงู ููุตูุงู.
        -   ูุซุงู: ุฅุฐุง ูุงู ุงูุชุดุฎูุต "ูุดุงูู ููู" ูุชู ุตุฑู ุฏูุงุก ุณูุฑูุ ุงุดุฑุญ ุงูุฑุงุจุท ุงูุทุจู ุงูููุทูู (ูุซู: "ูุฑุถู ุงูููู ุบุงูุจุงู ูุง ูุนุงููู ูู ุงูุณูุฑูุ ูุฐุง ูุฅู ุตุฑู ุฏูุงุก ุงูุณูุฑู ูุจุฑุฑ ูุถุจุท ุงูุญุงูุฉ ุงููุตุงุญุจุฉ").

    3.  **rejectionRisk (ูุฎุงุทุฑ ุงูุฑูุถ):**
        -   ุจูุงุกู ุนูู ุชุญููููุ ุญุฏุฏ ูุณุชูู ุงูุฎุทุฑ (ููุฎูุถ/ูุชูุณุท/ูุฑุชูุน).
        -   ุงุดุฑุญ ุณุจุจ ูุฐุง ุงูุชูููู ุจูุถูุญ.

    4.  **improvementSuggestions (ุงูุชุฑุงุญุงุช ุงูุชุญุณูู - ุงูุฌุฒุก ุงูุฃูู):**
        -   ููุง ุชุธูุฑ ุฎุจุฑุชู. ููุฑ ูุทุจูุจ ุงุณุชุดุงุฑู ูุฎุจูุฑ ูุงูู. ูุง ูู ุงููุญูุตุงุช ุฃู ุงูุงุณุชุดุงุฑุงุช ุงูุฅุถุงููุฉ ุงูุชู ูุงูุช **ุถุฑูุฑูุฉ ุทุจูุงู** ููุฐู ุงูุญุงูุฉ ูููู ุชู ุฅุบูุงููุงุ
        -   ูุฌุจ ุฃู ุชููู ุงูุงูุชุฑุงุญุงุช ููุทููุฉ ููุจููุฉ ุนูู ุจุฑูุชููููุงุช ุทุจูุฉ (ูุซู ADA, WHO).
        -   ููู ุงูุชุฑุงุญุ ูุฌุจ ุฃู ุชูุฏู ุจุงูุชูุตูู:
            -   **title:** ุงุณู ุงูุฅุฌุฑุงุก ุจูุถูุญ (ูุซุงู: "ูุญุต ุงูููุฌุงุช ููู ุงูุตูุชูุฉ ููููู ูุงููุซุงูุฉ (Kidney & Bladder Ultrasound)").
            -   **description:** ุงุดุฑุญ ุงูุฃูููุฉ ุงูุทุจูุฉ ุจุนูู. ููุงุฐุง ูู ุถุฑูุฑูุ (ูุซุงู: "ุถุฑูุฑู ูุชูููู ุจููุฉ ุงููููุ ูุงุณุชุจุนุงุฏ ูุฌูุฏ ุญุตูุงุช ุฃู ูุดุงูู ูู ุงููุณุงูู ุงูุจูููุฉ ูุฏ ุชููู ูู ุงูุณุจุจ ุงูุญูููู ูุฃูู ุงูุธูุฑ ูุชุฏููุฑ ูุธุงุฆู ุงูููู").
            -   **estimatedValue:** ูุฏุฑ ุงูุชูููุฉ ุจุงูุฑูุงู ุงูุณุนูุฏู (ูุซุงู: "250 ุฑูุงู ุณุนูุฏู").
            -   **whyNotRejectable:** ูุฏู ุญุฌุฉ ูููุฉ ููููุนุฉ ูุดุฑูุฉ ุงูุชุฃููู (ูุซุงู: "ูุนุชุจุฑ ูุฐุง ุงููุญุต ุฌุฒุกุงู ูุง ูุชุฌุฒุฃ ูู ุงูุชุดุฎูุต ุงูุชูุฑููู ูุฃูุฑุงุถ ุงูููู ูููุงู ููุฅุฑุดุงุฏุงุช ุงูุทุจูุฉุ ููุง ูููู ุงูุงุณุชุบูุงุก ุนูู ูุชุญุฏูุฏ ุงูุณุจุจ ุงูุฌุฐุฑู ูููุดููุฉ").
        -   **ุฃูุซูุฉ ุนูู ุงูุชุฑุงุญุงุช ุฐููุฉ ูุฌุจ ุฃู ุชููุฑ ุจูุง:** ุชุญููู ุจูู ูุงูู ูุน ูุณุจุฉ ุงูุฒูุงู ุฅูู ุงููุฑูุงุชูููู (UACR)ุ ูุญุต ุงูููุงุฑู (Electrolytes)ุ ุงุณุชุดุงุฑุฉ ูุชุฎุตุต (Nephrology/Cardiology Consultation)ุ ุฒูุงุฑุฉ ูุชุงุจุนุฉ ูุฌุฏููุฉ.

    5.  **potentialRevenueIncrease (ุงูุฒูุงุฏุฉ ุงููุญุชููุฉ ูู ุงูุฅูุฑุงุฏุงุช):**
        -   ุงุฌูุน ุงูููู ุงูุชูุฏูุฑูุฉ **ูุฌููุน** ุงูุชุฑุงุญุงุชู ููุฏู ุงููุฌููุน ุงูููุงุฆู ูุฑูู ูุงุถุญ ุจุงูุฑูุงู ุงูุณุนูุฏู.
    `;

  const payload = {
    contents: [{ role: "user", parts: [{ text: jsonPrompt }] }],
    generationConfig: {
      temperature: 0.5, // ุฒูุงุฏุฉ ุทูููุฉ ููุฅุจุฏุงุน ูู ุงูุชุญููู
      responseMimeType: "application/json",
      responseSchema: {
        type: "OBJECT",
        properties: {
          result: { type: "STRING", description: "ููุฎุต ุดุงูู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญูุ ูุดุฑุญ ุงูุญุงูุฉ ูุงูุฃุฎุทุงุก ุฃู ุงูุชูุตูุฑ ุฅู ูุฌุฏุ ููุนุทู ูุธุฑุฉ ุงุญุชุฑุงููุฉ" },
          justification: {
            type: "ARRAY",
            items: {
              type: "OBJECT",
              properties: {
                step: { type: "STRING", description: "ุงุณู ุงูุฅุฌุฑุงุก ุงูุฐู ุชู ุชููููู" },
                justification: { type: "STRING", description: "ูู ุงูุฅุฌุฑุงุก 'ูุจุฑุฑ' ุฃู 'ุบูุฑ ูุจุฑุฑ'" },
                rationale: { type: "STRING", description: "ุดุฑุญ ุนููู ูุชุฃูููู ูุงุถุญ ููุชูููู" },
              },
              required: ["step", "justification", "rationale"],
            },
          },
          rejectionRisk: { type: "STRING", description: "ูุณุชูู ุงูุฎุทูุฑุฉ: 'ููุฎูุถ', 'ูุชูุณุท', 'ูุฑุชูุน'" },
          rejectionReason: { type: "STRING", description: "ููุงุฐุง ูููู ุฑูุถ ุงููุทุงูุจุฉ ุฅู ูุฌุฏ ุณุจุจ" },
          rejectedValue: { type: "STRING", description: "ูููุฉ ุชูุฑูุจูุฉ ูุญุชููุฉ ููุฑูุถ ุจุงูุฑูุงู ุงูุณุนูุฏู" },
          improvementSuggestions: {
            type: "ARRAY",
            items: {
              type: "OBJECT",
              properties: {
                title: { type: "STRING", description: "ุงุณู ุงูุฅุฌุฑุงุก ุงูููุชุฑุญ (ูุซูุงู OCT ุฃู ุงุณุชุดุงุฑุฉ ุนููู)" },
                description: { type: "STRING", description: "ููุงุฐุง ูุฐุง ุงูุฅุฌุฑุงุก ููู ุทุจููุง ูุชุฃูููููุง" },
                estimatedValue: { type: "STRING", description: "ูููุฉ ุชูุฏูุฑูุฉ ููุฅุฌุฑุงุก ุจุงูุฑูุงู ุงูุณุนูุฏู" },
                whyNotRejectable: { type: "STRING", description: "ูุจุฑุฑุงุช ูููุฉ ุชููุน ุงูุฑูุถ ุงูุชุฃูููู" },
              },
              required: ["title", "description", "estimatedValue", "whyNotRejectable"],
            },
          },
          potentialRevenueIncrease: { type: "STRING", description: "ุชูุฏูุฑ ุงูุฒูุงุฏุฉ ุงููุญุชููุฉ ูู ุงูุฅูุฑุงุฏุงุช ุจุงูุฑูุงู ุงูุณุนูุฏู" },
        },
        required: ["result", "justification", "rejectionRisk", "rejectionReason", "rejectedValue", "improvementSuggestions", "potentialRevenueIncrease"],
      },
    },
  };

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorBody = await response.json();
      console.error("๐ฅ Gemini API Error Response:", errorBody);
      throw new Error(`API request failed: ${errorBody.error?.message || response.statusText}`);
    }

    const result = await response.json();
    const rawJsonString = result.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!rawJsonString) {
      throw new Error("ูู ูุชููู ุงููููุฐุฌ ูู ุฅูุดุงุก ุฑุฏ JSON.");
    }

    const parsedPayload = JSON.parse(rawJsonString);
    
    return res.status(200).json(parsedPayload);

  } catch (err) {
    console.error("๐ฅ Server-side Error:", err);
    return res.status(500).json({
      error: "ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
      detail: err.message,
    });
  }
}
