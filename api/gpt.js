// /api/gpt.js

/**
 * @description A multi-purpose serverless API endpoint. It now intelligently handles
 * requests from both the Doctor's Portal and the new Patient's Portal, providing
 * tailored responses for each. It also correctly handles single or multiple image uploads.
 */
export default async function handler(req, res) {
    // ... (The top part of the code remains the same)
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

    if (req.method === "OPTIONS") return res.status(200).end();
    if (req.method !== "POST") return res.status(405).json({ error: "Method Not Allowed" });

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
        console.error("๐ฅ Server-side Error: GEMINI_API_KEY is not set.");
        return res.status(500).json({
            error: "ุฎุทุฃ ูู ุฅุนุฏุงุฏุงุช ุงูุฎุงุฏู",
            detail: "ููุชุงุญ ูุงุฌูุฉ ุจุฑูุฌุฉ ุงูุชุทุจููุงุช (API Key) ุบูุฑ ููุฌูุฏ. ูุฑุฌู ูุฑุงุฌุนุฉ ุงููุณุคูู.",
        });
    }
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${apiKey}`;
    
    let htmlPrompt;
    const requestBody = req.body;

    if (requestBody.analysisType === 'patient') {
        // --- PATIENT PORTAL PROMPT (No changes here) ---
        // ... (The patient prompt remains the same as before)

    } else {
        // --- ๐ NEW EXPERT DOCTOR/INSURANCE AUDITOR PROMPT ---
        const { diagnosis, symptoms, age, gender, smoker, beforeProcedure, afterProcedure } = requestBody;
        htmlPrompt = `
        **ุดุฎุตูุชู ุงูุฃุณุงุณูุฉ:** ุฃูุช "ุฎุจูุฑ ุงุณุชุดุงุฑู ูู ุงููุฑุงุฌุนุฉ ุงูุทุจูุฉ ูุงูุชุฃููู ุงูุทุจู (Certified Medical Reimbursement Specialist)". ูุฏูู ุฎุจุฑุฉ ุนูููุฉ ูู ุจุฑูุชููููุงุช ุงูุนูุงุฌ ุงูุนุงูููุฉ (ูุซู UpToDate, NICE guidelines)ุ ูููุงุนุฏ ุงูุชุฑููุฒ ุงูุทุจู (ICD-10, CPT)ุ ูุณูุงุณุงุช ุดุฑูุงุช ุงูุชุฃููู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ. ุชุญูููู ูุฌุจ ุฃู ูููู ุฏููููุงุ ููุฏููุงุ ููุจููุงู ุนูู ุฃุฏูุฉ ุนูููุฉ.

        **ูููุชู:** ุชุญููู ุงูุญุงูุฉ ุงูุทุจูุฉ ุงููุฑููุฉ (ูุตูุง ูุตูุฑูุง) ูุชูุฏูู ุชูุฑูุฑ ุชุฏููู ุทุจู ุดุงูู ุจุตูุบุฉ HTML. ุงูุชูุฑูุฑ ูุฌุจ ุฃู ูุณุงุนุฏ ุงูุทุจูุจ ุนูู ููู ููุงุท ุงูููุฉ ูุงูุถุนู ูู ุฅุฏุงุฑุชู ููุญุงูุฉ ูู ููุธูุฑ ุทุจู ูุชุฃูููู.

        **ุจูุงูุงุช ุงูุญุงูุฉ ูุชุญููููุง:**
        - **ุงูุตูุฑ ุงููุฑููุฉ:** ูู ุจูุฑุงุกุฉ ูุชุญููู ูู ุตูุฑุฉ ุจุฏูุฉ ูุงุฆูุฉ. ุงุณุชุฎุฑุฌ ูููุง ุงูุชุดุฎูุตุงุชุ ุงูุฃุฏููุฉุ ุงูุฌุฑุนุงุชุ ูุงููุญูุตุงุช.
        - **ุงูุจูุงูุงุช ุงููุตูุฉ:**
            - ุงูุชุดุฎูุต ุงููููุชุฑ: ${diagnosis || "ูู ูุญุฏุฏ"}
            - ุงูุฃุนุฑุงุถ: ${symptoms || "ูู ุชุญุฏุฏ"}
            - ุนูุฑ ูุฌูุณ ุงููุฑูุถ: ${age || "ุบูุฑ ูุญุฏุฏ"}, ${gender || "ุบูุฑ ูุญุฏุฏ"}
            - ูุฏุฎู: ${smoker ? 'ูุนู' : 'ูุง'}
            - ุงูุฅุฌุฑุงุกุงุช ุงููุชุฎุฐุฉ: ${beforeProcedure || "ูุง ููุฌุฏ"}, ${afterProcedure || "ูุง ููุฌุฏ"}

        ---
        **ูููู ุงูุชูุฑูุฑ ุงููุทููุจ (ูุฌุจ ุฅูุชุงุฌ ููุฏ HTML ููุท ุจุงุชุจุงุน ูุฐุง ุงููููู ุจุฏูุฉ):**

        <h3><svg ...>ุชูุฑูุฑ ุงูุชุฏููู ุงูุทุจู ุงูุดุงูู</svg></h3>

        <div class="section">
            <h4>1. ุชูููู ุงูุฅุฌุฑุงุกุงุช ุงูุญุงููุฉ (ุงูุชุฏููู ุงูุทุจู)</h4>
            <p>ุชุญููู ููุฏู ููุฅุฌุฑุงุกุงุช ูุงูุฃุฏููุฉ ุงูุชู ุชู ุงุชุฎุงุฐูุงุ ูุน ุชูููู ูุฏู ุชูุงูููุง ูุน ุงูุจุฑูุชููููุงุช ุงูุทุจูุฉ ูุงุญุชูุงููุฉ ููุงููุฉ ุงูุชุฃููู.</p>
            <table class="audit-table">
                <thead>
                    <tr>
                        <th>ุงูุฅุฌุฑุงุก / ุงูุฏูุงุก</th>
                        <th>ุงูุชูููู ูุงูุชุนููู ุงูุนููู</th>
                        <th>ููุงููุฉ ุงูุชุฃููู</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="risk-green">
                        <td>[ุงุณู ุงูุฏูุงุก/ุงูุฅุฌุฑุงุก ุงูุฃูู]</td>
                        <td><strong>ุชูููู: ุณููู ูููุตู ุจู.</strong><br>ูุฐุง ุงูุฅุฌุฑุงุก ูุชูุงูู ูุน ุฅุฑุดุงุฏุงุช [ุงุฐูุฑ ุงุณู ุงูุจุฑูุชูููู ูุซู NICE] ูุนูุงุฌ [ุงุณู ุงูุญุงูุฉ]. ุงููุฑุฌุน: [ุถุน ุฑุงุจุทูุง ูููุตุฏุฑ ุงูุนููู ุฅู ุฃููู].</td>
                        <td><strong>ูุญุชูู ุฌุฏูุง.</strong> ุงูุฅุฌุฑุงุก ุถุฑูุฑู ุทุจููุง ูููุซู ุฌูุฏูุง.</td>
                    </tr>
                    <tr class="risk-red">
                        <td>[ุงุณู ุงูุฏูุงุก/ุงูุฅุฌุฑุงุก ุงูุซุงูู]</td>
                        <td><strong>ุชูููู: ุบูุฑ ูุจุฑุฑ ุทุจููุง.</strong><br>ูุฐุง ุงููุญุต ููุณ ูู ุถูู ุงูุฎุท ุงูุฃูู ููุชุดุฎูุต ุญุณุจ ุจุฑูุชูููู [ุงุณู ุงูุจุฑูุชูููู]. ูุงู ูุฌุจ ุงูุจุฏุก ุจู [ุงุฐูุฑ ุงูุฅุฌุฑุงุก ุงูุตุญูุญ].</td>
                        <td><strong>ูุฑููุถ ุบุงูุจูุง.</strong> ุณูุชู ุงุนุชุจุงุฑู ุบูุฑ ุถุฑูุฑู ุทุจููุง (Not Medically Necessary).</td>
                    </tr>
                    </tbody>
            </table>
        </div>

        <div class="section">
            <h4>2. ูุฑุต ุงูุชุญุณูู ูุฑูุน ุงูุฅูุฑุงุฏุงุช (ุงูุฅุฌุฑุงุกุงุช ุงููุงุฆุชุฉ)</h4>
            <p>ุจูุงุกู ุนูู ุงูุชุดุฎูุต ูุงูุฃุนุฑุงุถุ ูุฐู ูู ุงูุฅุฌุฑุงุกุงุช ูุงูุงุณุชุดุงุฑุงุช ุงูุถุฑูุฑูุฉ ุทุจููุง ูุงูุชู ุชู ุฅุบูุงููุงุ ูุงูุชู ูุงูุช ุณุชุฑูุน ูู ุฌูุฏุฉ ุงูุฑุนุงูุฉ ูุงูุฅูุฑุงุฏุงุช.</p>
            <div class="recommendation-card">
                <h5>ุฅุฌุฑุงุก ููุชุฑุญ: [ุงุณู ุงููุญุต ุฃู ุงูุงุณุชุดุงุฑุฉ ุงูููุชุฑุญุฉ]</h5>
                <p><strong>ุงููุจุฑุฑ ุงูุทุจู:</strong> ูุธุฑูุง ูู [ุงุฐูุฑ ุงูุนุฑุถ ุฃู ุงููุนูููุฉ]ุ ุชูุตู ุฅุฑุดุงุฏุงุช [ุงุณู ุงูุฌูุฉ ุงููุฑุฌุนูุฉ] ุจุฅุฌุฑุงุก ูุฐุง ุงููุญุต ูููุดู ุนู [ุงุฐูุฑ ุงููุฏู ูู ุงููุญุต]. ูุฐุง ุงูุฅุฌุฑุงุก ุถุฑูุฑู ูุงุณุชุจุนุงุฏ [ุงุฐูุฑ ุชุดุฎูุต ุชูุฑููู ููู].</p>
                <p><strong>ุงูุชุฃุซูุฑ ุงููุงูู:</strong> ุฅุถุงูุฉ ูุฐุง ุงูุฅุฌุฑุงุก ูุงู ูู ุงููููู ุฃู ูุฒูุฏ ุฅุฌูุงูู ุงููุงุชูุฑุฉ ุจูููุฉ ุชูุฑูุจูุฉ **~[ุถุน ูููุฉ ุชูุฏูุฑูุฉ] ุฑูุงู ุณุนูุฏู**.</p>
            </div>
            <div class="recommendation-card">
                </div>
        </div>

        <div class="section financial-summary">
            <h4>3. ุงูููุฎุต ุงููุงูู</h4>
            <table>
                <thead><tr><th>ุงููุคุดุฑ</th><th>ุงููููุฉ (ุฑูุงู ุณุนูุฏู)</th><th>ููุงุญุธุงุช</th></tr></thead>
                <tbody>
                    <tr><td>ุฅุฌูุงูู ุงูุฏุฎู ุงูุญุงูู (ุงููููุชุฑ)</td><td>[ุถุน ุงููููุฉ ููุง]</td><td>ุงููููุฉ ุงูุญุงููุฉ ูููุงุชูุฑุฉ.</td></tr>
                    <tr><td>ุฅุฌูุงูู ุงูุฎุตู ุงููุชููุน (ุงูุฑููุถุงุช)</td><td class="financial-red">[ุถุน ูููุฉ ุงูุฅุฌุฑุงุกุงุช ุงููุนุฑุถุฉ ููุฑูุถ]</td><td>ูููุฉ ุงูุฅุฌุฑุงุกุงุช ุฐุงุช ุงูุฎุทูุฑุฉ ุงูุญูุฑุงุก.</td></tr>
                    <tr><td>ุตุงูู ุงูุฏุฎู ุงููุชููุน</td><td>[ุงุญุณุจ ุงููุฑู]</td><td>ุงูุฏุฎู ุจุนุฏ ุฎุตู ุงูุฑููุถุงุช ุงููุญุชููุฉ.</td></tr>
                    <tr><td>ุฅุฌูุงูู ุงูุฏุฎู ุงููุญุชูู (ูุน ุงูุชุญุณููุงุช)</td><td class="financial-green">[ุงุญุณุจ ุงูุฅุฌูุงูู ูุน ุงูุฅุฌุฑุงุกุงุช ุงูููุชุฑุญุฉ]</td><td>ุฃูุตู ุฅูุฑุงุฏุงุช ููููุฉ ูู ุชู ุงุชุจุงุน ุงูุฎุทุฉ ุงููุซูู.</td></tr>
                </tbody>
            </table>
        </div>

        <div class="section">
            <h4>4. ุชูุตูุงุช ููุงุฆูุฉ ููุชุฑููุฒ ูุงูุชูุซูู</h4>
            <ul>
                <li>ุชุฃูุฏ ูู ุชูุซูู [ูุตูุญุฉ ูุญุฏุฏุฉุ ูุซู: ูุฏุฉ ุงูุฃุนุฑุงุถ] ูุชูููุฉ ุงููุจุฑุฑ ุงูุทุจู.</li>
                <li>ุนูุฏ ุงุณุชุฎุฏุงู ุงูุชุดุฎูุต [ICD-10 Code]ุ ูุฌุจ ุฏุงุฆููุง ุฑุจุทู ุจุงูุฅุฌุฑุงุก [CPT Code] ูุถูุงู ุงูููุงููุฉ.</li>
            </ul>
        </div>

        **ูุงุนุฏุฉ ุตุงุฑูุฉ:** ูุง ุชุถุน ุฃุจุฏุงู ุฃู ุฑููุฒ ุชูุณูู ูุซู \`\`\`html ูู ุจุฏุงูุฉ ุฑุฏู. ูุฌุจ ุฃู ูุจุฏุฃ ุฑุฏู ูุจุงุดุฑุฉ ุจูุณู \`<h3>\`.
        `;
    }

    // --- The rest of the file remains the same ---
    // (Code for creating payload, fetching from API, and handling response)
    // โ **FIX 1: Wrap the prompt string in a text object.**
    const parts = [{ text: htmlPrompt }];

    // โ **FIX 2: Handle both single image (string) and multiple images (array).**
    if (requestBody.imageData) {
        if (Array.isArray(requestBody.imageData)) {
            requestBody.imageData.forEach(imgData => {
                parts.push({ inline_data: { mime_type: "image/jpeg", data: imgData } });
            });
        } 
        else if (typeof requestBody.imageData === 'string') {
            parts.push({ inline_data: { mime_type: "image/jpeg", data: requestBody.imageData } });
        }
    }

    const payload = {
        contents: [{ parts: parts }],
        generationConfig: {
            temperature: 0.4, // Lower temperature for more consistent, factual output
        },
    };

    try {
        const response = await fetch(apiUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
        });

        const result = await response.json();

        if (!response.ok) {
            const errorMessage = result.error?.message || `API request failed: ${response.statusText}`;
            throw new Error(errorMessage);
        }

        const reportHtml = result.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!reportHtml) {
            console.error("๐ฅ Server-side Warning: Gemini API returned a successful response but no content.", result);
            throw new Error("ูู ูุชููู ุงููููุฐุฌ ูู ุฅูุดุงุก ุงูุชูุฑูุฑ. ูุฏ ุชููู ุงูุงุณุชุฌุงุจุฉ ูุงุฑุบุฉ.");
        }
        
        return res.status(200).json({ htmlReport: reportHtml });

    } catch (err) {
        console.error("๐ฅ Server-side Error:", err);
        return res.status(500).json({
            error: "ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุชุญููู ุงูุญุงูุฉ",
            detail: err.message,
        });
    }
}
